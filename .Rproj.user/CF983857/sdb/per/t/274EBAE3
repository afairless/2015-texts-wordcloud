{
    "contents" : "# Andrew Fairless\n# December 2015\n\n# The project below was created to produce word clouds from text messages that\n# were forwarded from cell phone to email with the app 'txtForward'.\n\n# These emails were exported from Mozilla Thunderbird into a '.csv' file\n# To protect privacy, the text message contents in the example 'messages.csv'\n# file has been replaced with lines from Shakespeare's 'The Comedy of Errors'.\n\n# The functions below were created to retain (some) punctuation (for, e.g., \n# emoticons) and manual control over some 'text cleaning' processes, instead of \n# using only the functions provided in the library 'tm'.\n\n# imports:  text messages from 'messages.csv' in current working directory\n# exports:  'png' and 'pdf' files of word clouds constructed from the text messages\n# dependencies:  libraries 'tm' and 'wordcloud'\n\n\n# ----------------------------\n# import and pre-process data\n\n\ntexts <- read.csv(\"messages.csv\", header = F, stringsAsFactors = F)\n\ntexts[grepl(\"You sent a text message\", texts[ , 6]), 1] <- c(\"sent\")\ntexts[grepl(\"You received a text message\", texts[ , 6]), 1] <- c(\"received\")\ntexts[ , 2] = as.POSIXct(texts[ , 4], format = \"%m/%d/%Y %H:%M\")\ntexts[ , 3] = as.Date(substr(texts[ , 4], start = 1, stop = 10), format = \"%m/%d/%Y\")\n\n# remove all extraneous information from text column; retain content of texts\nfor (iter in 1:dim(texts)[1]) {\n     # '9371' is the last 4 digits of the phone number\n     texts[iter, 6] <- gsub(\".*9371)\\n\", \"\", texts[iter, 6])\n}\n\ncolnames(texts) <- c(\"sentreceived\", \"datetime\", \"date\", \"textdatetime\", \"empty\", \"texts\")\n\nsenttexts <- texts[texts$sentreceived == \"sent\", 6]\nreceivedtexts <- texts[texts$sentreceived == \"received\", 6]\n\n\n# ----------------------------\n# functions\n\n\n# takes a vector of type 'character' (i.e., strings) and returns a vector of \n# numbers of the words/tokens contained within original vector\ncorpfreqprep <- function(vectoroftexts, removepunct = TRUE) {\n     corpus <- Corpus(VectorSource(vectoroftexts))\n     corpus <- tm_map(corpus, content_transformer(removeNumbers))\n     corpus <- tm_map(corpus, content_transformer(stripWhitespace))\n     if (removepunct) corpus <- tm_map(corpus, content_transformer(removePunctuation))\n     corpfreq <- colSums(as.matrix(DocumentTermMatrix(corpus)))\n     corpfreq <- sort(corpfreq, decreasing = TRUE)\n     return(corpfreq)\n}\n\n\n# takes a vector of strings/texts ('textsvector') and a vector of words to be\n# counted in 'textsvector' ('wordstofind') and returns a vector of the \n# counts/frequencies\n# this function was written to find multi-word phrases that are not detected\n# after a text has been tokenized, but it can search for single words, too\nfindmultiwords <- function(textsvector, wordstofind) {\n     wordsfreqs <- 0\n     wordsfreqs[1:length(wordstofind)] <- 0\n     # for each word/word-phrase to find\n     for (iter in 1:length(wordstofind)) {\n          tftable <- table(grepl(wordstofind[iter], textsvector))\n          names(wordsfreqs)[iter] <- wordstofind[iter]\n          for (iter2 in 1:length(tftable)) {\n               if (names(tftable)[iter2] == TRUE) wordsfreqs[iter] <- tftable[iter2]\n          }\n     }\n     return(wordsfreqs)\n}\n\n\n# takes a vector of strings/texts ('textsvector'), a vector of words to be\n# counted in 'textsvector' ('wordstofind'), and a vector of existing word\n# counts/frequencies ('corpfreq')\n# words specified in 'wordstofind' are counted in 'textsvector'\n# if counted word is already in 'corpfreq', its count calculated here replaces\n# the existing count in 'corpfreq'; if it's not found, the count is added to \n# the end of 'corpfreq'\n# returns vector of modified word counts/frequencies\nreplacecounts <- function(textsvector, corpfreq, wordstofind) {\n     # for each word/word-phrase to find\n     for (iter in 1:length(wordstofind)) {\n          tftable <- table(grepl(wordstofind[iter], textsvector))\n          for (iter2 in 1:length(tftable)) {\n               # if the word in 'wordstofind' is found in 'textsvector'...\n               if (names(tftable)[iter2] == TRUE) {\n                    # ...and if it exactly matches any word in 'corpfreq'...\n                    if (wordstofind[iter] %in% names(corpfreq) == TRUE) {\n                         # ...replace the count/frequency in 'corpfreq' with the one calculated in this function\n                         replaceindex <- which(names(corpfreq) == wordstofind[iter]) \n                         corpfreq[replaceindex] <- tftable[iter2]\n                         # if the word in 'wordstofind' is found in 'textsvector'...    \n                         # ...and if it is not found in 'corpfreq'...\n                    } else {\n                         #...add it to the end of 'corpfreq'\n                         corpfreq <- append(corpfreq, tftable[iter2])\n                         names(corpfreq)[length(corpfreq)] <- wordstofind[iter]\n                    }\n               }  \n          }\n     }\n     return(corpfreq)\n}\n\n\n# takes a vector of numbers/frequencies of words ('corpfreq') and a vector of \n# words to be removed from 'corpfreq' ('wordstoremove') and returns 'corpfreq' \n# minus the removed words\nremovewords <- function(corpfreq, wordstoremove) {\n     rmwordsindex <- NA\n     rmwordsindex[1:length(rmwords)] <- NA\n     for (iter in 1:length(rmwords)){\n          temp <- which(names(corpfreq) == rmwords[iter])\n          if (length(temp) == 1) rmwordsindex[iter] <- temp\n     }\n     rmwordsindex <- rmwordsindex[!is.na(rmwordsindex)]\n     corpfreq <- corpfreq[-rmwordsindex]\n     return(corpfreq)\n}\n\n\n# takes a vector of numbers/frequencies of words ('corpfreq') and a nested list\n# of words to combine ('wordstocombine') in 'corpfreq'\n# each element of 'wordstocombine' is a vector of words to be combined with each\n# other\n# combined words (e.g., \"you\", \"you.\", and \"you,\") have their frequencies \n# summed/totaled and redundant entries removed, leaving only a single entry in \n# 'corpfreq'\n# the single, remaining, combined entry is named as the 1st word listed in the\n# element of 'wordstocombine' (e.g., \"you\", because it is listed first)\n# returns 'corpfreq' with the words' frequencies totaled and redundant entries \n# deleted\ncombinewords <- function(corpfreq, wordstocombine) {\n     # for each element in list 'wordstocombine'\n     for (iter in 1:length(wordstocombine)) {     # nested loop bad; should use 'lapply'\n          wordindices <- NA\n          wordindices[1:length(wordstocombine[[iter]])] <- NA\n          # for each word in each element of the list 'wordstocombine'\n          for (iter2 in 1:length(wordstocombine[[iter]])) {\n               # wordfound <- any(grep(wordstocombine[[iter]][iter2], names(corpfreq), fixed = TRUE))\n               wordfound <- wordstocombine[[iter]][iter2] %in% names(corpfreq)\n               # if the word appears anywhere in 'corpfreq'...\n               if (wordfound == TRUE) {\n                    # ...save its index to 'wordindices'\n                    wordindices[iter2] <- which(names(corpfreq) == wordstocombine[[iter]][iter2])\n               }\n          }\n          # if all elements of 'wordindices' are 'NA's, skip code block below\n          # avoids error if none of words in 'wordstocombine[[iter]]' are found in 'corpfreq'\n          if (any(!is.na(wordindices))) {    \n               wordindices <- wordindices[!is.na(wordindices)]   # remove 'NA's\n               names(corpfreq)[wordindices] <- wordstocombine[[iter]][1]\n               corpfreq[wordindices[1]] <- sum(corpfreq[wordindices])\n               if (length(wordindices) > 1) corpfreq <- corpfreq[-wordindices[-1]]\n          }\n     }\n     return(corpfreq)\n}\n\n\n# takes a vector of numbers/frequencies of words ('corpfreq') and a list of \n# word pairs ('changewords') wherein the count/frequency of the 2nd word in \n# each pair is subtracted from the count/frequency of the 1st word\ncountchange <- function(corpfreq, changewords) {\n     for (iter in 1:length(changewords)) {\n          # if both words are found in 'corpfreq'...\n          if (changewords[[iter]][1] %in% names(corpfreq) && \n              changewords[[iter]][2] %in% names(corpfreq)) {\n               wordindex1 <- which(names(corpfreq) == changewords[[iter]][1])\n               wordindex2 <- which(names(corpfreq) == changewords[[iter]][2])\n               # subtract the count of the 2nd word from the count of the 1st word\n               corpfreq[wordindex1] <- corpfreq[wordindex1] - corpfreq[wordindex2]\n          }\n     }\n     return(corpfreq)\n}\n\n\nmainfunction <- function(textsvector) {\n     corpfreq <- corpfreqprep(textsvector, removepunct = TRUE)\n     corpfreqpunct <- corpfreqprep(textsvector, removepunct = FALSE)\n     punctinclude <- grep(\"[!?:;)()=/\\']\", names(corpfreqpunct))\n     corpfreq <- append(corpfreq, corpfreqpunct[punctinclude])\n     temp <- findmultiwords(tolower(textsvector), findwords)\n     corpfreq <- append(corpfreq, temp)\n     corpfreq <- removewords(corpfreq)\n     corpfreq <- combinewords(corpfreq, combwords)\n     corpfreq <- countchange(corpfreq, countchangewords)\n     corpfreq <- sort(corpfreq, decreasing = TRUE)\n     return(corpfreq)\n}\n\n\n# replaces words in 'corpfreq'\n# for example, can use to capitalize proper nouns that are inappropriately lower case\nreplacenames <- function(corpfreq, replacepairs) {\n     for (iter in 1:length(replacepairs)) {\n          nameindex <- which(names(corpfreq) == replacepairs[[iter]][1])\n          names(corpfreq)[nameindex] <- replacepairs[[iter]][2]\n     }\n     return(corpfreq)\n}\n\n\n# ----------------------------\n# word lists called by functions\n# should be adjusted to obtain desired word clouds\n\n\n# phrases or compound words with spaces that should be included\n# e.g., \"North America\", \"high school\", \"cell phone\"\nfindwords <- c(\"DROMIO OF EPHESUS\",\n               \"DROMIO OF SYRACUSE\")\n\n# words to remove\nrmwords <- c(\"and\", \"for\", \"of\",\n             \"the\")\n\n# words (e.g., misspelled words) that should be counted as other words\n# e.g., 'recieve' should be counted as 'receive' or 'america' as 'America'\n# the 'correct' word should be the first word listed for each list element\n# the 'correct' word is the only one that will be retained as a name\n# ensure that a word is listed only once in each list element; if word is listed\n# more than once, the final sum will be too large\ncombwords <- list(c(\"dromio\", \"drommio\"), \n                  c(\"antipholus\", \"antifolus\"),\n                  c(\"was\", \"wuz\"))\n\n# this word list adjusts single-word counts based on the multi-word phrases in\n# 'findwords' and called by the function 'findmultiwords'\n# really, it turns out this list is not necessary; all the information needed\n# for this list is already in 'findwords'\ncountchangewords <- list(c(\"dromio\", \"dromio of ephesus\"),\n                        c(\"ephesus\", \"dromio of ephesus\"),\n                        c(\"syracuse\", \"dromio of syracuse\"))\n\n# this word list is called by the function 'replacenames'\n# the first word in each element of the list is replaced by the second word\nreplacewords <- list(c(\"syracuse\", \"Syracuse\"),\n                     c(\"i'll\", \"I'll\"),\n                     c(\"angelo\", \"Angelo\"))\n\n\n# ----------------------------\n# main script:  sets up data frames of word frequencies\n\n\nlibrary(tm)\nlibrary(wordcloud)\n\n# number of words to include in each 'sent' and 'received' texts\nwordnum <- 50\n\nsentcorpfreq <- mainfunction(senttexts)\nreceivedcorpfreq <- mainfunction(receivedtexts)\n\nsentcorpfreq <- replacenames(sentcorpfreq, replacewords)\nreceivedcorpfreq <- replacenames(receivedcorpfreq, replacewords)\n\nsentcorpfreq[1:wordnum]\nreceivedcorpfreq[1:wordnum]\n\ncombcorpfreq <- append(sentcorpfreq[1:wordnum], receivedcorpfreq[1:wordnum])\ncombfreq <- as.data.frame(combcorpfreq)\ncombfreq[ , 2] <- names(combcorpfreq)\ncombfreq[ , 3] <- append(rep(\"blue\", wordnum), rep(\"orange\", wordnum))\ncombfreq <- combfreq[order(combfreq[ , 1], decreasing = T), ]\n\n\n# ----------------------------\n# output script:  creates and saves word clouds in external files\n\n\nrotationprop <- 0.35     # proportion of words to be vertical in word cloud\npdfwdth <- 10            # 'pdf' width in inches\npdfhght <- 8             # 'pdf' height in inches\npngwdth <- 1280 * 2      # 'png' width in pixels\npnghght <- 1024 * 2      # 'png' height in pixels\npngres <- 350            # 'png' resolution in pixels per inch\n \n\n# wordclouds in 'png' files\npng(file = \"sentwordcloud.png\", width = pngwdth, height = pnghght, res = pngres)\nwordcloud(names(sentcorpfreq)[1:wordnum], sentcorpfreq[1:wordnum])\ndev.off()\n\npng(file = \"receivedwordcloud.png\", width = pngwdth, height = pnghght, res = pngres)\nwordcloud(names(receivedcorpfreq)[1:wordnum], receivedcorpfreq[1:wordnum])\ndev.off()\n\npng(file = \"combowordcloud.png\", width = pngwdth, height = pnghght, res = pngres, bg = \"transparent\")\nwordcloud(combfreq[ , 2], combfreq[ , 1], \n          rot.per = rotationprop, colors = combfreq[ , 3], random.order = F,\n          ordered.colors = T, random.color = F)\ndev.off()\n\n\n# wordclouds in 'pdf' files\npdf(file = \"sentwordcloud.pdf\", width = pdfwdth, height = pdfhght)\nwordcloud(names(sentcorpfreq)[1:wordnum], sentcorpfreq[1:wordnum], \n          rot.per = rotationprop, colors = \"blue\")\ndev.off()\n\npdf(file = \"receivedwordcloud.pdf\", width = pdfwdth, height = pdfhght)\nwordcloud(names(receivedcorpfreq)[1:wordnum], receivedcorpfreq[1:wordnum], \n          rot.per = rotationprop, colors = \"orange\")\ndev.off()\n\npdf(file = \"combowordcloud.pdf\", width = pdfwdth, height = pdfhght)\nwordcloud(combfreq[ , 2], combfreq[ , 1], \n          rot.per = rotationprop, colors = combfreq[ , 3], random.order = F,\n          ordered.colors = T, random.color = F)\ndev.off()\n",
    "created" : 1450914901515.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1737431877",
    "id" : "274EBAE3",
    "lastKnownWriteTime" : 1450994312,
    "path" : "/media/zh/My Passport/backup/2015 code share/2015 texts wordcloud/wordcloud/project.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}